// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]

  notifications Notification[]

  lastName  String?
  phone     String?
  bio       String?
  height    Int?
  weight    Int?
  birthYear Int?
  gender    Gender?
  goal      String?
  role      UserRole @default(PROSPECT)

  isOnboarded Boolean @default(false)
  contracts       Contract[]  @relation("ClientContracts")
  offers          Offer[]     @relation("CoachOffers")
  availabilities  Availability[]

  // Offre sélectionnée par l'utilisateur
  selectedOffer   Offer?  @relation("UserSelectedOffer", fields: [selectedOfferId], references: [id])
  selectedOfferId String?

  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum ProgramType {
  PERSONAL
  SMALL_GROUP
  PROGRAMMING
}

model Program {
  id          String      @id @default(cuid())
  type        ProgramType
  name        String
  description String      @db.Text
  imageUrl    String?
  
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @updatedAt

  isPublished Boolean   @default(false)
  offers      Offer[]
  

  @@index([type])
}

enum UserRole {
  COACH
  ADMIN
  CLIENT
  PROSPECT
}

enum Gender {
  MALE
  FEMALE
}

enum ContractStatus {
  ACTIVE
  CANCELLED
  COMPLETED
}

enum PlanningStatus {
  PLANNED
  DONE
  CANCELLED
}

enum NotificationType {
  PROGRAM_UPDATE
  SESSION_REMINDER
  SYSTEM_MESSAGE
  ACHIEVEMENT
  NEW_PROSPECT
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String          @db.Text
  isRead    Boolean         @default(false)
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime?       // Pour les notifications temporaires
  metadata  Json?

  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt

  @@index([userId])
  @@index([createdAt])
  @@index([isRead])
  @@map("notification")
}

model Offer {
  id          String   @id @default(cuid())
  coach       User     @relation("CoachOffers", fields: [coachId], references: [id])
  coachId     String
  program     Program  @relation(fields: [programId], references: [id])
  programId   String
  sessions    Int
  price       Float
  duration    Int      // en mois
  isPublished Boolean  @default(false)
  contracts   Contract[]

  // Utilisateurs qui ont sélectionné cette offre
  selectedByUsers User[] @relation("UserSelectedOffer")

  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
}

model Contract {
  id            String   @id @default(cuid())
  client        User     @relation("ClientContracts", fields: [clientId], references: [id])
  clientId      String
  offer         Offer    @relation(fields: [offerId], references: [id])
  offerId       String
  startDate     DateTime
  endDate       DateTime
  totalSessions Int
  isFlexible    Boolean
  amount        Float
  status        ContractStatus
  plannings     Planning[]
  payments      Payment[]

  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
}

model Planning {
  id         String         @id @default(cuid())
  contract   Contract       @relation(fields: [contractId], references: [id])
  contractId String
  date       DateTime
  status     PlanningStatus

  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
}

model Payment {
  id          String   @id @default(cuid())
  contract    Contract @relation(fields: [contractId], references: [id])
  contractId  String
  amount      Float
  paymentDate DateTime
  comment     String?

  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
}

model Availability {
  id        String   @id @default(cuid())
  client    User     @relation(fields: [clientId], references: [id])
  clientId  String
  date      DateTime
  startTime DateTime
  endTime   DateTime

  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
}