---
description: APPLY project-specific rules TO ensure consistent documentation across projects
globs: **/*
alwaysApply: true
---

# Project-Specific Rules Template

<version>1.0.0</version>

## Context
- This file is used as specification only for this project

## Recommendation

### Languages
- For code and logs: English
- For labels: French language in UI and errors

### Overall Architecture
- *Project structure*: monorepo, modules, packages
- *Architectural patterns used*: (Clean Architecture for backend, Feature-based for frontend, Shared DTO between frontend and backend in packages/shared-types)

### Authentication
- *Authentication mechanisms used*: Better-Auth (https://github.com/better-auth/better-auth)

### State Management
- *State management approach*: MobX
- *Organization of stores/reducers*: only stores
- *Patterns for state updates*: state and domain entirely managed by Mobx, never React Components

### API and Services
- *Service structure*: `services/` contains API calls in frontend
  - Never use `fetch` directly, always use @api-fetcher.ts from @api-auth.ts inside services like @email.service.ts
- *API call convention*s: check @swagger.json
- *Error handling and retries*: @error.class.ts must be used.

## Custom for this project

### Backend

#### Controllers
- Use @api-response.decorator.ts and @api-response-redirect.decorator.ts instead of Swagger annotations.

### Frontend

#### Tests
- When needed use http fetch, use @auth-test.helper.ts to authenticated user.

### Shared-Typed
- DTO are located in `packages/shared-types` and shared between backend (e.g. controllers) and frontend (e.g loaders or services)
- Most of the validation is done with `class-validator`.
- One file per type, export everything from @index.ts

### Applications and Packages
- Always use `bun` instead of `npm`, `pnpm` or `yarn`

### Critical Dependencies

| Package | Version | Application | Description |
|---------|---------|-------------|-------------|
| React | 19.0.0 | Frontend | Main UI library |
| Tailwind CSS | 4.0.12 | Frontend | Utility-first CSS framework |
| NextJS | 15.3.0 | Backend & Frontend | Node.js backend framework |
| Prisma | 6.4.1 | Backend | ORM and database client |
| TypeScript | 5.8.2 | All | Strongly typed programming language |
| ESLint | 9.22.0 | All | JavaScript/TypeScript linter |
| Prettier | 3.5.3 | All | Code formatter |

## Critical Rules

<critical>
- ALWAYS follow project-specific conventions
- NEVER bypass established architectural patterns
- ALWAYS respect project naming standards
- NEVER duplicate business logic between layers
- ALWAYS document important architectural decisions
</critical> 
