import { PrismaClient } from '../prisma/generated/index.js';

const prisma = new PrismaClient();

async function testUserRoles() {
  try {
    console.log('üîç Test des r√¥les utilisateurs dans la base de donn√©es...\n');

    // R√©cup√©rer tous les utilisateurs avec leurs r√¥les
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        isOnboarded: true,
        createdAt: true,
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    console.log(`üìä Total d'utilisateurs trouv√©s: ${users.length}\n`);

    if (users.length === 0) {
      console.log('‚ùå Aucun utilisateur trouv√© dans la base de donn√©es');
      return;
    }

    // Afficher les d√©tails de chaque utilisateur
    users.forEach((user, index) => {
      console.log(`üë§ Utilisateur ${index + 1}:`);
      console.log(`   ID: ${user.id}`);
      console.log(`   Email: ${user.email}`);
      console.log(`   Nom: ${user.name || 'Non d√©fini'}`);
      console.log(`   R√¥le: ${user.role || '‚ùå Non d√©fini'}`);
      console.log(`   Onboard√©: ${user.isOnboarded ? '‚úÖ Oui' : '‚ùå Non'}`);
      console.log(`   Cr√©√© le: ${user.createdAt}`);
      console.log('');
    });

    // Compter les utilisateurs par r√¥le
    const roleCounts = {};
    users.forEach(user => {
      const role = user.role || 'NON_DEFINI';
      roleCounts[role] = (roleCounts[role] || 0) + 1;
    });

    console.log('üìà R√©partition par r√¥le:');
    Object.entries(roleCounts).forEach(([role, count]) => {
      console.log(`   ${role}: ${count} utilisateur(s)`);
    });

    // V√©rifier s'il y a des utilisateurs ADMIN ou COACH
    const adminUsers = users.filter(user => user.role === 'ADMIN');
    const coachUsers = users.filter(user => user.role === 'COACH');

    console.log('\nüîë Utilisateurs avec acc√®s admin:');
    if (adminUsers.length > 0) {
      adminUsers.forEach(user => {
        console.log(`   ‚úÖ ADMIN: ${user.email} (${user.name || 'Sans nom'})`);
      });
    } else {
      console.log('   ‚ùå Aucun utilisateur ADMIN trouv√©');
    }

    if (coachUsers.length > 0) {
      coachUsers.forEach(user => {
        console.log(`   ‚úÖ COACH: ${user.email} (${user.name || 'Sans nom'})`);
      });
    } else {
      console.log('   ‚ùå Aucun utilisateur COACH trouv√©');
    }

    // Suggestions
    console.log('\nüí° Suggestions:');
    if (adminUsers.length === 0 && coachUsers.length === 0) {
      console.log('   - Cr√©er au moins un utilisateur ADMIN ou COACH pour tester');
      console.log('   - V√©rifier que le champ role est bien d√©fini lors de la cr√©ation');
    }

    if (users.some(user => !user.role)) {
      console.log('   - Certains utilisateurs n\'ont pas de r√¥le d√©fini');
      console.log('   - Mettre √† jour la base de donn√©es pour d√©finir les r√¥les');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le test
testUserRoles();
